# BOJ 15486. 퇴사 / D3
'''
문제
상담원으로 일하고 있는 백준이는 퇴사를 하려고 한다.
오늘부터 N+1일째 되는 날 퇴사를 하기 위해서, 남은 N일 동안 최대한 많은 상담을 하려고 한다.
백준이는 비서에게 최대한 많은 상담을 잡으라고 부탁을 했고, 비서는 하루에 하나씩 서로 다른 사람의 상담을 잡아놓았다.
각각의 상담은 상담을 완료하는데 걸리는 기간 Ti와 상담을 했을 때 받을 수 있는 금액 Pi로 이루어져 있다.

입력
첫째 줄에 N (1 ≤ N ≤ 1,500,000)이 주어진다.
둘째 줄부터 N개의 줄에 Ti와 Pi가 공백으로 구분되어서 주어지며, 1일부터 N일까지 순서대로 주어진다.
(1 ≤ Ti ≤ 50, 1 ≤ Pi ≤ 1,000)

출력
첫째 줄에 백준이가 얻을 수 있는 최대 이익을 출력한다.
'''
import sys

input = sys.stdin.readline
N = int(input())

p = [0] # 0을 넣는 이유는 인덱스와 날짜를 같게 하기 위해서 넣는 것임
t = [0]

for _ in range(N):
    T, P = map(int, input().split())
    p.append(P)
    t.append(T)

dp = [0] * (N+2)
for i in range(N, 0, -1):
    if i + T[i] <= N+1:
        dp[i] = max(p[i]+dp[i+T[i]], dp[i+1])
    else:
        dp[i] = dp[i+1]

print(max(dp))

# 맞는데 시간과 가격을 plan이라는 리스트에 튜플로 넣으니 점화식 표현이 너무 어지러워서 다시 풀이
# plan = [0]
# for _ in range(N):
#     T, P = map(int, input().split())
#     plan.append((T, P))
#
# dp = [0]*(N*2)
# for i in range(N, 0, -1):
#     if i + plan[i][0] <= N+1:
#         dp[i] = max(plan[i][1]+dp[i+plan[i][0]], dp[i+1])
#     else:
#         dp[i] = dp[i+1]
# print(max(dp))

'''
뒤에서부터 계산하는 것이 더 안정적이다.
앞에서 부터하면 그 날부터 시작해서 퇴사하는 날까지 일이 마무리 가능한지 확인해야하지만
뒤에서부터 진행하면 그럴 필요 없음.
dp에는 N+1일과 0일에 대한 인덱스를 만들어서 연산하기 편하게 제작
i일에 시작하는 최대 금액은 dp[i+t[i]]+p[i](i일 상담을 시작하면), dp[i+1](i일 상담을 시작하지 않은 경우) 중 큰 값이다.
만약 i날 시작해서 퇴사하는 날까지 일이 안끝나는 경우 dp[i+1](상담을 하지 않은 경우)가 최대 금액이 된다.
dp를 완성하고 거기서 max값을 찾으면 퇴사 전 최대로 벌 수 있는 금액이 된다.
'''