"""
BOJ2011. 암호코드

[문제]
상근이와 선영이가 다른 사람들이 남매간의 대화를 듣는 것을 방지하기 위해서 대화를 서로 암호화 하기로 했다. 그래서 다음과 같은 대화를 했다.

상근: 그냥 간단히 암호화 하자. A를 1이라고 하고, B는 2로, 그리고 Z는 26으로 하는거야.
선영: 그럼 안돼. 만약, "BEAN"을 암호화하면 25114가 나오는데, 이걸 다시 글자로 바꾸는 방법은 여러 가지가 있어.
상근: 그렇네. 25114를 다시 영어로 바꾸면, "BEAAD", "YAAD", "YAN", "YKD", "BEKD", "BEAN" 총 6가지가 나오는데, BEAN이 맞는 단어라는건 쉽게 알수 있잖아?
선영: 예가 적절하지 않았네 ㅠㅠ 만약 내가 500자리 글자를 암호화 했다고 해봐. 그 때는 나올 수 있는 해석이 정말 많은데, 그걸 언제 다해봐?
상근: 얼마나 많은데?
선영: 구해보자!
어떤 암호가 주어졌을 때, 그 암호의 해석이 몇 가지가 나올 수 있는지 구하는 프로그램을 작성하시오.

[입력]
첫째 줄에 5000자리 이하의 암호가 주어진다. 암호는 숫자로 이루어져 있다.

[출력]
나올 수 있는 해석의 가짓수를 구하시오. 정답이 매우 클 수 있으므로, 1000000으로 나눈 나머지를 출력한다.
암호가 잘못되어 암호를 해석할 수 없는 경우에는 0을 출력한다.
"""

import sys
input = lambda: sys.stdin.readline().rstrip()

def count_cipher_interpretations(cipher):

    MOD = 1000000   # 값이 너무 커지는 것을 막기 위한 모듈러 설정
    n = len(cipher) # n: 암호문의 길이

    dp = [0] * (n + 1)  # dp[i] = cipher[:i](앞에서 i자리까지)를 해석할 수 있는 방법의 가짓수
    dp[0] = 1  # 초기 조건 : 빈 문자열 해석하는 경우는 1가지 (base case)

    # 암호문의 1번째 자리 확인
    if cipher[0] == '0':    # 암호가 '0'으로 시작하면 잘못된 암호값이므로 해석 불가능
        return 0
    dp[1] = 1  # 첫 글자가 '0'이 아닌 경우 해석은 1가지

    # 암호문의 2번째 자리부터 n번째 자리까지 확인
    for i in range(2, n + 1):
        
        # 1. 한 자리 수 해석 (현재 숫자 cipher[i-1]이 '1'~'9'라면 가능)
        num = int(cipher[i-1])
        if 1 <= num <= 9:
            dp[i] += dp[i-1]

        # 2. 두 자리 수 해석 (이전 숫자 + 현재 숫자로 만든 2자리 숫자 cipher[i-2:i]가 '10'~'26' 범위라면 가능)
        num = int(cipher[i-2:i])
        if 10 <= num <= 26:
            dp[i] += dp[i-2]

        # 값이 커질 수 있으므로 문제 조건에 따라 모듈러 연산
        dp[i] %= MOD

    # 전체 암호문 해석 경우의 수 반환
    return dp[n]
    
# main
cipher = input()    # 암호문 입력 받기
cnt = count_cipher_interpretations(cipher)  # 암호문 해석 방법의 가짓수 계산하여 cnt에 저장
print(cnt)  # 결과 출력
