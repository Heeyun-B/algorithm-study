"""
문제
바로 어제 최백준 조교가 방 열쇠를 주머니에 넣은 채 깜빡하고 서울로 가 버리는 황당한 상황에 직면한 조교들은,
702호에 새로운 보안 시스템을 설치하기로 하였다. 이 보안 시스템은 열쇠가 아닌 암호로 동작하게 되어 있는 시스템이다.

암호는 서로 다른 L개의 알파벳 소문자들로 구성되며 최소 한 개의 모음(a, e, i, o, u)과 최소 두 개의 자음으로 구성되어 있다고 알려져 있다.
또한 정렬된 문자열을 선호하는 조교들의 성향으로 미루어 보아 암호를 이루는 알파벳이 암호에서 증가하는 순서로 배열되었을 것이라고 추측된다.
즉, abc는 가능성이 있는 암호이지만 bac는 그렇지 않다.

새 보안 시스템에서 조교들이 암호로 사용했을 법한 문자의 종류는 C가지가 있다고 한다.
이 알파벳을 입수한 민식, 영식 형제는 조교들의 방에 침투하기 위해 암호를 추측해 보려고 한다.
C개의 문자들이 모두 주어졌을 때, 가능성 있는 암호들을 모두 구하는 프로그램을 작성하시오.

입력
첫째 줄에 두 정수 L, C가 주어진다. (3 ≤ L ≤ C ≤ 15) 다음 줄에는 C개의 문자들이 공백으로 구분되어 주어진다. 주어지는 문자들은 알파벳 소문자이며, 중복되는 것은 없다.

출력
각 줄에 하나씩, 사전식으로 가능성 있는 암호를 모두 출력한다.

---
로직 정의
1. 우선 각 알파벳을 list에 담아두고 sort를 진행 -> 오름차순을 유지하면서 DFS
2. Recur 함수 탈출 조건
  -> len(pwd)가 주어진 조건 L과 동일한 상태에서
  -> 모음 조합인 vowels 내에 있는 값 중 하나는 들어있다면
  -> print()로 바로 출력, Return

"""
# pwd -> string 형식으로, 
def recur(idx, pwd):
    cnt = 0
    # 길이가 L이 완성되면
    if len(pwd) == L:
        # 모음의 개수를 세고
        for v in vowels:
            cnt += pwd.count(v)
        # 모음 개수가 1개 이상이고, 자음이 2개 이상이라면
        if cnt >= 1 and L-cnt >= 2:
                print(pwd)
                return
        else:
            return
    if idx < C:
        # 해당 문자를 선택한 경우
        recur(idx+1, pwd + arr[idx])
        # 해당 문자를 선택하지 않은 경우
        recur(idx+1, pwd)
    return



L, C = map(int, input().split())
arr = list(input().split())
# 오름차순 정렬
arr.sort()
vowels = 'aeiou'
pwd = ''
recur(0,pwd)

